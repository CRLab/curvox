#!/usr/bin/env python2

import binvox_rw
import argparse
import os
import skimage.measure

import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D


def parse_args():
    parser = argparse.ArgumentParser(description="Complete a single point cloud using specified completion method")
    parser.add_argument('binvox_filepath', type=str, help='binvox file to convert')
    parser.add_argument('--resolution', type=int, default=40, help="resolution^3 voxels to display")

    args = parser.parse_args()
    return args


def main():
    args = parse_args()

    if not os.path.isfile(args.binvox_filepath) or not args.binvox_filepath.endswith(".binvox"):
        print("File '{}' does not exist or is not a binvox file".format(args.binvox_filepath))
    binvox_data = binvox_rw.read_as_3d_array(open(args.binvox_filepath, 'r'))

    print(binvox_data.data.shape)
    scale_factor = binvox_data.dims[0] / args.resolution
    voxels = skimage.measure.block_reduce(binvox_data.data, (scale_factor, scale_factor, scale_factor), np.max)
    print("Voxel resolution '{}' reduced to '{}'".format(binvox_data.dims, voxels.shape))

    # set the colors of each object
    colors = np.empty(voxels.shape, dtype=object)
    colors[voxels] = 'green'

    # and plot everything
    fig = plt.figure()
    ax = fig.gca(projection='3d')
    ax.voxels(voxels, facecolors=colors, edgecolor='k')

    plt.show()


if __name__ == "__main__":
    main()
