#!/usr/bin/env python

import argparse

import numpy as np
import pcl

import curvox


def parse_args():
    parser = argparse.ArgumentParser(description="Find all clusters of a given pointcloud")
    parser.add_argument('input_pcd_filepath', type=str, help='pcd file to find clusters for')
    parser.add_argument('--distance_threshold', type=float, help='Distance from camera frame to objects', default=0.05)
    parser.add_argument('--image_width', type=int, default=640)
    parser.add_argument('--image_height', type=int, default=480)
    parser.add_argument('--fx', type=int, default=540)
    parser.add_argument('--fy', type=int, default=540)
    parser.add_argument('--cx', type=int, default=320)
    parser.add_argument('--cy', type=int, default=240)
    parser.add_argument('--out_filepath', type=str, default='cluster.pcd', help='Output clusters filenames')

    args = parser.parse_args()
    return args


def main():
    args = parse_args()

    p = pcl.PointCloud()
    p.from_file(args.input_pcd_filepath)
    input_pcd = p.to_array()
    input_pcd = input_pcd[~np.isnan(input_pcd[:, 2]), :]

    # Primesense Carmine 1.09 Intrinsics: width/height/fx/fy/cx/cy [640 | 480 | 540.994 | 540.994 | 320.000 | 240.000]
    output = curvox.pcd_clustering.pcl_clustering(
        input_pcd,
        distance_threshold=args.distance_threshold,
        image_width=args.image_width,
        image_height=args.image_height,
        fx=args.fx, fy=args.fy, cx=args.cx, cy=args.cy
    )

    for cluster_index in range(len(output)):
        pcd_path_output = args.out_filepath.replace(".pcd", '{}.pcd'.format(cluster_index))
        p.from_array(output[cluster_index].astype(np.float32))
        p.to_file(pcd_path_output)


if __name__ == "__main__":
    main()
