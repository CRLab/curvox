#!/usr/bin/env python

from src import curvox
import curvox.pc_vox_utils
import binvox_rw
import argparse
import os
import mcubes
import numpy as np


def parse_args():
    parser = argparse.ArgumentParser(description="Complete a single point cloud using specified completion method")
    parser.add_argument('binvox_filepath', type=str, help='binvox file to convert')
    parser.add_argument('--out_file', type=str, default='binvox.ply', help='ply output file')
    parser.add_argument('--smooth', action='store_true', help='Apply Laplacian smoothing to result')
    parser.add_argument('--marching_cubes_resolution', type=float, default=0.5, help='Resolution of mcubes')

    args = parser.parse_args()
    return args


def main():
    args = parse_args()

    if not os.path.isfile(args.binvox_filepath) or not args.binvox_filepath.endswith(".binvox"):
        print("File '{}' does not exist or is not a binvox file".format(args.binvox_filepath))
    binvox_data = binvox_rw.read_as_3d_array(open(args.binvox_filepath, 'r'))

    vertices, faces = mcubes.marching_cubes(binvox_data.data, args.marching_cubes_resolution)

    center_point_in_voxel_grid = np.array(binvox_data.dims)/2
    vertices = curvox.pc_vox_utils.rescale_mesh(vertices, binvox_data.translate, binvox_data.scale, center_point_in_voxel_grid)

    ply_data = curvox.cloud_to_mesh_conversions.generate_ply_data(vertices, faces)

    # If we are smoothing use meshlabserver to smooth over mesh
    if args.smooth:
        ply_data = curvox.cloud_to_mesh_conversions.smooth_ply(ply_data)

    ply_data.write(open(args.out_file, 'wb'))


if __name__ == "__main__":
    main()
